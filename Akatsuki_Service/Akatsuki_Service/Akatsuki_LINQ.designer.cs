#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akatsuki_Service
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Akatsuki_Database")]
	public partial class Akatsuki_LINQDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertGood(Good instance);
    partial void UpdateGood(Good instance);
    partial void DeleteGood(Good instance);
    partial void InsertServiceReview(ServiceReview instance);
    partial void UpdateServiceReview(ServiceReview instance);
    partial void DeleteServiceReview(ServiceReview instance);
    partial void InsertGoodReview(GoodReview instance);
    partial void UpdateGoodReview(GoodReview instance);
    partial void DeleteGoodReview(GoodReview instance);
    partial void InsertServiceCart(ServiceCart instance);
    partial void UpdateServiceCart(ServiceCart instance);
    partial void DeleteServiceCart(ServiceCart instance);
    partial void InsertProductCart(ProductCart instance);
    partial void UpdateProductCart(ProductCart instance);
    partial void DeleteProductCart(ProductCart instance);
    #endregion
		
		public Akatsuki_LINQDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Akatsuki_DatabaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public Akatsuki_LINQDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Akatsuki_LINQDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Akatsuki_LINQDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Akatsuki_LINQDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<Good> Goods
		{
			get
			{
				return this.GetTable<Good>();
			}
		}
		
		public System.Data.Linq.Table<ServiceReview> ServiceReviews
		{
			get
			{
				return this.GetTable<ServiceReview>();
			}
		}
		
		public System.Data.Linq.Table<GoodReview> GoodReviews
		{
			get
			{
				return this.GetTable<GoodReview>();
			}
		}
		
		public System.Data.Linq.Table<ServiceCart> ServiceCarts
		{
			get
			{
				return this.GetTable<ServiceCart>();
			}
		}
		
		public System.Data.Linq.Table<ProductCart> ProductCarts
		{
			get
			{
				return this.GetTable<ProductCart>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Student_Number;
		
		private string _Student_Email;
		
		private string _Student_Address;
		
		private string _Student_Personal_Email;
		
		private string _Student_Name;
		
		private string _Student_Surname;
		
		private string _Student_Username;
		
		private int _Student_Cellphone_Number;
		
		private string _Password;
		
		private EntitySet<Service> _Services;
		
		private EntitySet<Good> _Goods;
		
		private EntitySet<ServiceReview> _ServiceReviews;
		
		private EntitySet<GoodReview> _GoodReviews;
		
		private EntitySet<ServiceCart> _ServiceCarts;
		
		private EntitySet<ProductCart> _ProductCarts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudent_NumberChanging(int value);
    partial void OnStudent_NumberChanged();
    partial void OnStudent_EmailChanging(string value);
    partial void OnStudent_EmailChanged();
    partial void OnStudent_AddressChanging(string value);
    partial void OnStudent_AddressChanged();
    partial void OnStudent_Personal_EmailChanging(string value);
    partial void OnStudent_Personal_EmailChanged();
    partial void OnStudent_NameChanging(string value);
    partial void OnStudent_NameChanged();
    partial void OnStudent_SurnameChanging(string value);
    partial void OnStudent_SurnameChanged();
    partial void OnStudent_UsernameChanging(string value);
    partial void OnStudent_UsernameChanged();
    partial void OnStudent_Cellphone_NumberChanging(int value);
    partial void OnStudent_Cellphone_NumberChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Student()
		{
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			this._Goods = new EntitySet<Good>(new Action<Good>(this.attach_Goods), new Action<Good>(this.detach_Goods));
			this._ServiceReviews = new EntitySet<ServiceReview>(new Action<ServiceReview>(this.attach_ServiceReviews), new Action<ServiceReview>(this.detach_ServiceReviews));
			this._GoodReviews = new EntitySet<GoodReview>(new Action<GoodReview>(this.attach_GoodReviews), new Action<GoodReview>(this.detach_GoodReviews));
			this._ServiceCarts = new EntitySet<ServiceCart>(new Action<ServiceCart>(this.attach_ServiceCarts), new Action<ServiceCart>(this.detach_ServiceCarts));
			this._ProductCarts = new EntitySet<ProductCart>(new Action<ProductCart>(this.attach_ProductCarts), new Action<ProductCart>(this.detach_ProductCarts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student_Number", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Student_Number
		{
			get
			{
				return this._Student_Number;
			}
			set
			{
				if ((this._Student_Number != value))
				{
					this.OnStudent_NumberChanging(value);
					this.SendPropertyChanging();
					this._Student_Number = value;
					this.SendPropertyChanged("Student_Number");
					this.OnStudent_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Student_Email
		{
			get
			{
				return this._Student_Email;
			}
			set
			{
				if ((this._Student_Email != value))
				{
					this.OnStudent_EmailChanging(value);
					this.SendPropertyChanging();
					this._Student_Email = value;
					this.SendPropertyChanged("Student_Email");
					this.OnStudent_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student_Address", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Student_Address
		{
			get
			{
				return this._Student_Address;
			}
			set
			{
				if ((this._Student_Address != value))
				{
					this.OnStudent_AddressChanging(value);
					this.SendPropertyChanging();
					this._Student_Address = value;
					this.SendPropertyChanged("Student_Address");
					this.OnStudent_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student_Personal_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Student_Personal_Email
		{
			get
			{
				return this._Student_Personal_Email;
			}
			set
			{
				if ((this._Student_Personal_Email != value))
				{
					this.OnStudent_Personal_EmailChanging(value);
					this.SendPropertyChanging();
					this._Student_Personal_Email = value;
					this.SendPropertyChanged("Student_Personal_Email");
					this.OnStudent_Personal_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Student_Name
		{
			get
			{
				return this._Student_Name;
			}
			set
			{
				if ((this._Student_Name != value))
				{
					this.OnStudent_NameChanging(value);
					this.SendPropertyChanging();
					this._Student_Name = value;
					this.SendPropertyChanged("Student_Name");
					this.OnStudent_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student_Surname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Student_Surname
		{
			get
			{
				return this._Student_Surname;
			}
			set
			{
				if ((this._Student_Surname != value))
				{
					this.OnStudent_SurnameChanging(value);
					this.SendPropertyChanging();
					this._Student_Surname = value;
					this.SendPropertyChanged("Student_Surname");
					this.OnStudent_SurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Student_Username
		{
			get
			{
				return this._Student_Username;
			}
			set
			{
				if ((this._Student_Username != value))
				{
					this.OnStudent_UsernameChanging(value);
					this.SendPropertyChanging();
					this._Student_Username = value;
					this.SendPropertyChanged("Student_Username");
					this.OnStudent_UsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student_Cellphone_Number", DbType="Int NOT NULL")]
		public int Student_Cellphone_Number
		{
			get
			{
				return this._Student_Cellphone_Number;
			}
			set
			{
				if ((this._Student_Cellphone_Number != value))
				{
					this.OnStudent_Cellphone_NumberChanging(value);
					this.SendPropertyChanging();
					this._Student_Cellphone_Number = value;
					this.SendPropertyChanged("Student_Cellphone_Number");
					this.OnStudent_Cellphone_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Service", Storage="_Services", ThisKey="Student_Number", OtherKey="Student_Number")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Good", Storage="_Goods", ThisKey="Student_Number", OtherKey="Student_Number")]
		public EntitySet<Good> Goods
		{
			get
			{
				return this._Goods;
			}
			set
			{
				this._Goods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_ServiceReview", Storage="_ServiceReviews", ThisKey="Student_Number", OtherKey="sNUM")]
		public EntitySet<ServiceReview> ServiceReviews
		{
			get
			{
				return this._ServiceReviews;
			}
			set
			{
				this._ServiceReviews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_GoodReview", Storage="_GoodReviews", ThisKey="Student_Number", OtherKey="sNUM")]
		public EntitySet<GoodReview> GoodReviews
		{
			get
			{
				return this._GoodReviews;
			}
			set
			{
				this._GoodReviews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_ServiceCart", Storage="_ServiceCarts", ThisKey="Student_Number", OtherKey="sNUM")]
		public EntitySet<ServiceCart> ServiceCarts
		{
			get
			{
				return this._ServiceCarts;
			}
			set
			{
				this._ServiceCarts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_ProductCart", Storage="_ProductCarts", ThisKey="Student_Number", OtherKey="sNUM")]
		public EntitySet<ProductCart> ProductCarts
		{
			get
			{
				return this._ProductCarts;
			}
			set
			{
				this._ProductCarts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_Goods(Good entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Goods(Good entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_ServiceReviews(ServiceReview entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_ServiceReviews(ServiceReview entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_GoodReviews(GoodReview entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_GoodReviews(GoodReview entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_ServiceCarts(ServiceCart entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_ServiceCarts(ServiceCart entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_ProductCarts(ProductCart entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_ProductCarts(ProductCart entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Services")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Services_Name;
		
		private decimal _Services_Price;
		
		private string _Services_Description;
		
		private string _Services_Image_;
		
		private int _Services_ID;
		
		private string _Services_Catergory;
		
		private int _Student_Number;
		
		private EntitySet<ServiceReview> _ServiceReviews;
		
		private EntitySet<ServiceCart> _ServiceCarts;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServices_NameChanging(string value);
    partial void OnServices_NameChanged();
    partial void OnServices_PriceChanging(decimal value);
    partial void OnServices_PriceChanged();
    partial void OnServices_DescriptionChanging(string value);
    partial void OnServices_DescriptionChanged();
    partial void OnServices_Image_Changing(string value);
    partial void OnServices_Image_Changed();
    partial void OnServices_IDChanging(int value);
    partial void OnServices_IDChanged();
    partial void OnServices_CatergoryChanging(string value);
    partial void OnServices_CatergoryChanged();
    partial void OnStudent_NumberChanging(int value);
    partial void OnStudent_NumberChanged();
    #endregion
		
		public Service()
		{
			this._ServiceReviews = new EntitySet<ServiceReview>(new Action<ServiceReview>(this.attach_ServiceReviews), new Action<ServiceReview>(this.detach_ServiceReviews));
			this._ServiceCarts = new EntitySet<ServiceCart>(new Action<ServiceCart>(this.attach_ServiceCarts), new Action<ServiceCart>(this.detach_ServiceCarts));
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Services_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Services_Name
		{
			get
			{
				return this._Services_Name;
			}
			set
			{
				if ((this._Services_Name != value))
				{
					this.OnServices_NameChanging(value);
					this.SendPropertyChanging();
					this._Services_Name = value;
					this.SendPropertyChanged("Services_Name");
					this.OnServices_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Services_Price", DbType="Decimal(18,0) NOT NULL")]
		public decimal Services_Price
		{
			get
			{
				return this._Services_Price;
			}
			set
			{
				if ((this._Services_Price != value))
				{
					this.OnServices_PriceChanging(value);
					this.SendPropertyChanging();
					this._Services_Price = value;
					this.SendPropertyChanged("Services_Price");
					this.OnServices_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Services_Description", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Services_Description
		{
			get
			{
				return this._Services_Description;
			}
			set
			{
				if ((this._Services_Description != value))
				{
					this.OnServices_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Services_Description = value;
					this.SendPropertyChanged("Services_Description");
					this.OnServices_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Services_Image ]", Storage="_Services_Image_", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Services_Image_
		{
			get
			{
				return this._Services_Image_;
			}
			set
			{
				if ((this._Services_Image_ != value))
				{
					this.OnServices_Image_Changing(value);
					this.SendPropertyChanging();
					this._Services_Image_ = value;
					this.SendPropertyChanged("Services_Image_");
					this.OnServices_Image_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Services_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Services_ID
		{
			get
			{
				return this._Services_ID;
			}
			set
			{
				if ((this._Services_ID != value))
				{
					this.OnServices_IDChanging(value);
					this.SendPropertyChanging();
					this._Services_ID = value;
					this.SendPropertyChanged("Services_ID");
					this.OnServices_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Services_Catergory", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Services_Catergory
		{
			get
			{
				return this._Services_Catergory;
			}
			set
			{
				if ((this._Services_Catergory != value))
				{
					this.OnServices_CatergoryChanging(value);
					this.SendPropertyChanging();
					this._Services_Catergory = value;
					this.SendPropertyChanged("Services_Catergory");
					this.OnServices_CatergoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student_Number", DbType="Int NOT NULL")]
		public int Student_Number
		{
			get
			{
				return this._Student_Number;
			}
			set
			{
				if ((this._Student_Number != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudent_NumberChanging(value);
					this.SendPropertyChanging();
					this._Student_Number = value;
					this.SendPropertyChanged("Student_Number");
					this.OnStudent_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ServiceReview", Storage="_ServiceReviews", ThisKey="Services_ID", OtherKey="sID")]
		public EntitySet<ServiceReview> ServiceReviews
		{
			get
			{
				return this._ServiceReviews;
			}
			set
			{
				this._ServiceReviews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ServiceCart", Storage="_ServiceCarts", ThisKey="Services_ID", OtherKey="ServiceID")]
		public EntitySet<ServiceCart> ServiceCarts
		{
			get
			{
				return this._ServiceCarts;
			}
			set
			{
				this._ServiceCarts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Service", Storage="_Student", ThisKey="Student_Number", OtherKey="Student_Number", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._Student_Number = value.Student_Number;
					}
					else
					{
						this._Student_Number = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ServiceReviews(ServiceReview entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_ServiceReviews(ServiceReview entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_ServiceCarts(ServiceCart entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_ServiceCarts(ServiceCart entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Goods")]
	public partial class Good : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Goods_Name;
		
		private decimal _Goods_Price;
		
		private string _Goods_Description;
		
		private string _Goods_Image;
		
		private int _Goods_ID;
		
		private string _Goods_Catergory;
		
		private int _Student_Number;
		
		private EntitySet<GoodReview> _GoodReviews;
		
		private EntitySet<ProductCart> _ProductCarts;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGoods_NameChanging(string value);
    partial void OnGoods_NameChanged();
    partial void OnGoods_PriceChanging(decimal value);
    partial void OnGoods_PriceChanged();
    partial void OnGoods_DescriptionChanging(string value);
    partial void OnGoods_DescriptionChanged();
    partial void OnGoods_ImageChanging(string value);
    partial void OnGoods_ImageChanged();
    partial void OnGoods_IDChanging(int value);
    partial void OnGoods_IDChanged();
    partial void OnGoods_CatergoryChanging(string value);
    partial void OnGoods_CatergoryChanged();
    partial void OnStudent_NumberChanging(int value);
    partial void OnStudent_NumberChanged();
    #endregion
		
		public Good()
		{
			this._GoodReviews = new EntitySet<GoodReview>(new Action<GoodReview>(this.attach_GoodReviews), new Action<GoodReview>(this.detach_GoodReviews));
			this._ProductCarts = new EntitySet<ProductCart>(new Action<ProductCart>(this.attach_ProductCarts), new Action<ProductCart>(this.detach_ProductCarts));
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Goods_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Goods_Name
		{
			get
			{
				return this._Goods_Name;
			}
			set
			{
				if ((this._Goods_Name != value))
				{
					this.OnGoods_NameChanging(value);
					this.SendPropertyChanging();
					this._Goods_Name = value;
					this.SendPropertyChanged("Goods_Name");
					this.OnGoods_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Goods_Price", DbType="Decimal(18,0) NOT NULL")]
		public decimal Goods_Price
		{
			get
			{
				return this._Goods_Price;
			}
			set
			{
				if ((this._Goods_Price != value))
				{
					this.OnGoods_PriceChanging(value);
					this.SendPropertyChanging();
					this._Goods_Price = value;
					this.SendPropertyChanged("Goods_Price");
					this.OnGoods_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Goods_Description", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Goods_Description
		{
			get
			{
				return this._Goods_Description;
			}
			set
			{
				if ((this._Goods_Description != value))
				{
					this.OnGoods_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Goods_Description = value;
					this.SendPropertyChanged("Goods_Description");
					this.OnGoods_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Goods_Image", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Goods_Image
		{
			get
			{
				return this._Goods_Image;
			}
			set
			{
				if ((this._Goods_Image != value))
				{
					this.OnGoods_ImageChanging(value);
					this.SendPropertyChanging();
					this._Goods_Image = value;
					this.SendPropertyChanged("Goods_Image");
					this.OnGoods_ImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Goods_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Goods_ID
		{
			get
			{
				return this._Goods_ID;
			}
			set
			{
				if ((this._Goods_ID != value))
				{
					this.OnGoods_IDChanging(value);
					this.SendPropertyChanging();
					this._Goods_ID = value;
					this.SendPropertyChanged("Goods_ID");
					this.OnGoods_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Goods_Catergory", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Goods_Catergory
		{
			get
			{
				return this._Goods_Catergory;
			}
			set
			{
				if ((this._Goods_Catergory != value))
				{
					this.OnGoods_CatergoryChanging(value);
					this.SendPropertyChanging();
					this._Goods_Catergory = value;
					this.SendPropertyChanged("Goods_Catergory");
					this.OnGoods_CatergoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student_Number", DbType="Int NOT NULL")]
		public int Student_Number
		{
			get
			{
				return this._Student_Number;
			}
			set
			{
				if ((this._Student_Number != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudent_NumberChanging(value);
					this.SendPropertyChanging();
					this._Student_Number = value;
					this.SendPropertyChanged("Student_Number");
					this.OnStudent_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Good_GoodReview", Storage="_GoodReviews", ThisKey="Goods_ID", OtherKey="gID")]
		public EntitySet<GoodReview> GoodReviews
		{
			get
			{
				return this._GoodReviews;
			}
			set
			{
				this._GoodReviews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Good_ProductCart", Storage="_ProductCarts", ThisKey="Goods_ID", OtherKey="ProductID")]
		public EntitySet<ProductCart> ProductCarts
		{
			get
			{
				return this._ProductCarts;
			}
			set
			{
				this._ProductCarts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Good", Storage="_Student", ThisKey="Student_Number", OtherKey="Student_Number", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Goods.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Goods.Add(this);
						this._Student_Number = value.Student_Number;
					}
					else
					{
						this._Student_Number = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GoodReviews(GoodReview entity)
		{
			this.SendPropertyChanging();
			entity.Good = this;
		}
		
		private void detach_GoodReviews(GoodReview entity)
		{
			this.SendPropertyChanging();
			entity.Good = null;
		}
		
		private void attach_ProductCarts(ProductCart entity)
		{
			this.SendPropertyChanging();
			entity.Good = this;
		}
		
		private void detach_ProductCarts(ProductCart entity)
		{
			this.SendPropertyChanging();
			entity.Good = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceReview")]
	public partial class ServiceReview : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _reviewID;
		
		private int _sID;
		
		private int _sNUM;
		
		private string _comment;
		
		private EntityRef<Student> _Student;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnreviewIDChanging(int value);
    partial void OnreviewIDChanged();
    partial void OnsIDChanging(int value);
    partial void OnsIDChanged();
    partial void OnsNUMChanging(int value);
    partial void OnsNUMChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    #endregion
		
		public ServiceReview()
		{
			this._Student = default(EntityRef<Student>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reviewID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int reviewID
		{
			get
			{
				return this._reviewID;
			}
			set
			{
				if ((this._reviewID != value))
				{
					this.OnreviewIDChanging(value);
					this.SendPropertyChanging();
					this._reviewID = value;
					this.SendPropertyChanged("reviewID");
					this.OnreviewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sID", DbType="Int NOT NULL")]
		public int sID
		{
			get
			{
				return this._sID;
			}
			set
			{
				if ((this._sID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsIDChanging(value);
					this.SendPropertyChanging();
					this._sID = value;
					this.SendPropertyChanged("sID");
					this.OnsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sNUM", DbType="Int NOT NULL")]
		public int sNUM
		{
			get
			{
				return this._sNUM;
			}
			set
			{
				if ((this._sNUM != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsNUMChanging(value);
					this.SendPropertyChanging();
					this._sNUM = value;
					this.SendPropertyChanged("sNUM");
					this.OnsNUMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="VarChar(MAX)")]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_ServiceReview", Storage="_Student", ThisKey="sNUM", OtherKey="Student_Number", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.ServiceReviews.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.ServiceReviews.Add(this);
						this._sNUM = value.Student_Number;
					}
					else
					{
						this._sNUM = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ServiceReview", Storage="_Service", ThisKey="sID", OtherKey="Services_ID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.ServiceReviews.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.ServiceReviews.Add(this);
						this._sID = value.Services_ID;
					}
					else
					{
						this._sID = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GoodReview")]
	public partial class GoodReview : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _reviewID;
		
		private int _gID;
		
		private int _sNUM;
		
		private string _comment;
		
		private EntityRef<Good> _Good;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnreviewIDChanging(int value);
    partial void OnreviewIDChanged();
    partial void OngIDChanging(int value);
    partial void OngIDChanged();
    partial void OnsNUMChanging(int value);
    partial void OnsNUMChanged();
    partial void OncommentChanging(string value);
    partial void OncommentChanged();
    #endregion
		
		public GoodReview()
		{
			this._Good = default(EntityRef<Good>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reviewID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int reviewID
		{
			get
			{
				return this._reviewID;
			}
			set
			{
				if ((this._reviewID != value))
				{
					this.OnreviewIDChanging(value);
					this.SendPropertyChanging();
					this._reviewID = value;
					this.SendPropertyChanged("reviewID");
					this.OnreviewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gID", DbType="Int NOT NULL")]
		public int gID
		{
			get
			{
				return this._gID;
			}
			set
			{
				if ((this._gID != value))
				{
					if (this._Good.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngIDChanging(value);
					this.SendPropertyChanging();
					this._gID = value;
					this.SendPropertyChanged("gID");
					this.OngIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sNUM", DbType="Int NOT NULL")]
		public int sNUM
		{
			get
			{
				return this._sNUM;
			}
			set
			{
				if ((this._sNUM != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsNUMChanging(value);
					this.SendPropertyChanging();
					this._sNUM = value;
					this.SendPropertyChanged("sNUM");
					this.OnsNUMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comment", DbType="VarChar(MAX)")]
		public string comment
		{
			get
			{
				return this._comment;
			}
			set
			{
				if ((this._comment != value))
				{
					this.OncommentChanging(value);
					this.SendPropertyChanging();
					this._comment = value;
					this.SendPropertyChanged("comment");
					this.OncommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Good_GoodReview", Storage="_Good", ThisKey="gID", OtherKey="Goods_ID", IsForeignKey=true)]
		public Good Good
		{
			get
			{
				return this._Good.Entity;
			}
			set
			{
				Good previousValue = this._Good.Entity;
				if (((previousValue != value) 
							|| (this._Good.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Good.Entity = null;
						previousValue.GoodReviews.Remove(this);
					}
					this._Good.Entity = value;
					if ((value != null))
					{
						value.GoodReviews.Add(this);
						this._gID = value.Goods_ID;
					}
					else
					{
						this._gID = default(int);
					}
					this.SendPropertyChanged("Good");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_GoodReview", Storage="_Student", ThisKey="sNUM", OtherKey="Student_Number", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.GoodReviews.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.GoodReviews.Add(this);
						this._sNUM = value.Student_Number;
					}
					else
					{
						this._sNUM = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceCart")]
	public partial class ServiceCart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CartID;
		
		private int _sNUM;
		
		private int _ServiceID;
		
		private int _ItemQuantity;
		
		private EntityRef<Service> _Service;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCartIDChanging(int value);
    partial void OnCartIDChanged();
    partial void OnsNUMChanging(int value);
    partial void OnsNUMChanged();
    partial void OnServiceIDChanging(int value);
    partial void OnServiceIDChanged();
    partial void OnItemQuantityChanging(int value);
    partial void OnItemQuantityChanged();
    #endregion
		
		public ServiceCart()
		{
			this._Service = default(EntityRef<Service>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CartID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CartID
		{
			get
			{
				return this._CartID;
			}
			set
			{
				if ((this._CartID != value))
				{
					this.OnCartIDChanging(value);
					this.SendPropertyChanging();
					this._CartID = value;
					this.SendPropertyChanged("CartID");
					this.OnCartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sNUM", DbType="Int NOT NULL")]
		public int sNUM
		{
			get
			{
				return this._sNUM;
			}
			set
			{
				if ((this._sNUM != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsNUMChanging(value);
					this.SendPropertyChanging();
					this._sNUM = value;
					this.SendPropertyChanged("sNUM");
					this.OnsNUMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceID", DbType="Int NOT NULL")]
		public int ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemQuantity", DbType="Int NOT NULL")]
		public int ItemQuantity
		{
			get
			{
				return this._ItemQuantity;
			}
			set
			{
				if ((this._ItemQuantity != value))
				{
					this.OnItemQuantityChanging(value);
					this.SendPropertyChanging();
					this._ItemQuantity = value;
					this.SendPropertyChanged("ItemQuantity");
					this.OnItemQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ServiceCart", Storage="_Service", ThisKey="ServiceID", OtherKey="Services_ID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.ServiceCarts.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.ServiceCarts.Add(this);
						this._ServiceID = value.Services_ID;
					}
					else
					{
						this._ServiceID = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_ServiceCart", Storage="_Student", ThisKey="sNUM", OtherKey="Student_Number", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.ServiceCarts.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.ServiceCarts.Add(this);
						this._sNUM = value.Student_Number;
					}
					else
					{
						this._sNUM = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductCart")]
	public partial class ProductCart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CartID;
		
		private int _sNUM;
		
		private int _ProductID;
		
		private int _ItemQuantity;
		
		private EntityRef<Good> _Good;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCartIDChanging(int value);
    partial void OnCartIDChanged();
    partial void OnsNUMChanging(int value);
    partial void OnsNUMChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnItemQuantityChanging(int value);
    partial void OnItemQuantityChanged();
    #endregion
		
		public ProductCart()
		{
			this._Good = default(EntityRef<Good>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CartID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CartID
		{
			get
			{
				return this._CartID;
			}
			set
			{
				if ((this._CartID != value))
				{
					this.OnCartIDChanging(value);
					this.SendPropertyChanging();
					this._CartID = value;
					this.SendPropertyChanged("CartID");
					this.OnCartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sNUM", DbType="Int NOT NULL")]
		public int sNUM
		{
			get
			{
				return this._sNUM;
			}
			set
			{
				if ((this._sNUM != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsNUMChanging(value);
					this.SendPropertyChanging();
					this._sNUM = value;
					this.SendPropertyChanged("sNUM");
					this.OnsNUMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Good.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemQuantity", DbType="Int NOT NULL")]
		public int ItemQuantity
		{
			get
			{
				return this._ItemQuantity;
			}
			set
			{
				if ((this._ItemQuantity != value))
				{
					this.OnItemQuantityChanging(value);
					this.SendPropertyChanging();
					this._ItemQuantity = value;
					this.SendPropertyChanged("ItemQuantity");
					this.OnItemQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Good_ProductCart", Storage="_Good", ThisKey="ProductID", OtherKey="Goods_ID", IsForeignKey=true)]
		public Good Good
		{
			get
			{
				return this._Good.Entity;
			}
			set
			{
				Good previousValue = this._Good.Entity;
				if (((previousValue != value) 
							|| (this._Good.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Good.Entity = null;
						previousValue.ProductCarts.Remove(this);
					}
					this._Good.Entity = value;
					if ((value != null))
					{
						value.ProductCarts.Add(this);
						this._ProductID = value.Goods_ID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Good");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_ProductCart", Storage="_Student", ThisKey="sNUM", OtherKey="Student_Number", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.ProductCarts.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.ProductCarts.Add(this);
						this._sNUM = value.Student_Number;
					}
					else
					{
						this._sNUM = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
